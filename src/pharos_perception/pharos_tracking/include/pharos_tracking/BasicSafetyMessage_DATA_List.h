// Generated by gencpp from file wave_tcp/BasicSafetyMessage_DATA_List.msg
// DO NOT EDIT!


#ifndef WAVE_TCP_MESSAGE_BASICSAFETYMESSAGE_DATA_LIST_H
#define WAVE_TCP_MESSAGE_BASICSAFETYMESSAGE_DATA_LIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <wave_tcp/BasicSafetyMessage_DATA.h>

namespace wave_tcp
{
template <class ContainerAllocator>
struct BasicSafetyMessage_DATA_List_
{
  typedef BasicSafetyMessage_DATA_List_<ContainerAllocator> Type;

  BasicSafetyMessage_DATA_List_()
    : BasicSafetyMessage_DATA_List()  {
    }
  BasicSafetyMessage_DATA_List_(const ContainerAllocator& _alloc)
    : BasicSafetyMessage_DATA_List(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::wave_tcp::BasicSafetyMessage_DATA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::wave_tcp::BasicSafetyMessage_DATA_<ContainerAllocator> >::other >  _BasicSafetyMessage_DATA_List_type;
  _BasicSafetyMessage_DATA_List_type BasicSafetyMessage_DATA_List;





  typedef boost::shared_ptr< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> const> ConstPtr;

}; // struct BasicSafetyMessage_DATA_List_

typedef ::wave_tcp::BasicSafetyMessage_DATA_List_<std::allocator<void> > BasicSafetyMessage_DATA_List;

typedef boost::shared_ptr< ::wave_tcp::BasicSafetyMessage_DATA_List > BasicSafetyMessage_DATA_ListPtr;
typedef boost::shared_ptr< ::wave_tcp::BasicSafetyMessage_DATA_List const> BasicSafetyMessage_DATA_ListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wave_tcp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'wave_tcp': ['/home/pharos/pp_ws18/src/pharos_drivers/wave_tcp/msg/Payload', '/home/pharos/pp_ws18/src/pharos_drivers/wave_tcp/msg/Meta', '/home/pharos/pp_ws18/src/pharos_drivers/wave_tcp/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4b361f20ced01411166abb0780d3348";
  }

  static const char* value(const ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4b361f20ced0141ULL;
  static const uint64_t static_value2 = 0x1166abb0780d3348ULL;
};

template<class ContainerAllocator>
struct DataType< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wave_tcp/BasicSafetyMessage_DATA_List";
  }

  static const char* value(const ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BasicSafetyMessage_DATA[] BasicSafetyMessage_DATA_List\n\
\n\
================================================================================\n\
MSG: wave_tcp/BasicSafetyMessage_DATA\n\
WaveHeader header\n\
Payload_BasicSafetyMessage_DATA payload\n\
\n\
================================================================================\n\
MSG: wave_tcp/WaveHeader\n\
uint16 Packet_type\n\
uint8 Current_sequence\n\
uint16 Payload_size\n\
uint8 Device_type\n\
\n\
================================================================================\n\
MSG: wave_tcp/Payload_BasicSafetyMessage_DATA\n\
BSMcoreData BSMcoreData\n\
VehicleSafetyExtensions VehicleSafetyExtensions\n\
\n\
================================================================================\n\
MSG: wave_tcp/BSMcoreData\n\
uint8 MsgCount\n\
uint64 Tempoaray_ID\n\
uint16 DSecond\n\
GPS_Position GPS_Position\n\
Position_Accuracy Position_Accuracy\n\
uint8 TransmissionState\n\
float32 Speed\n\
float32 Heading\n\
float32 SteeringWheelAngle\n\
Acceleration_Set_4Way Acceleration_Set_4Way\n\
uint8 BrakeSystemStatus_AuxiliaryBrake_Status\n\
Vehicle_Size Vehicle_Size\n\
\n\
================================================================================\n\
MSG: wave_tcp/GPS_Position\n\
float64 Latitude\n\
float64 Longitude\n\
float64 Elevation\n\
\n\
\n\
================================================================================\n\
MSG: wave_tcp/Position_Accuracy\n\
uint8 SemiMajorAxisAccuracy\n\
uint8 SemiMinorAxisAccuracy\n\
uint16 SemiMajorAxisOrientation\n\
\n\
================================================================================\n\
MSG: wave_tcp/Acceleration_Set_4Way\n\
float32 Latitude_Acceleration\n\
float32 Longitude_Acceleration\n\
float32 YawRate\n\
\n\
================================================================================\n\
MSG: wave_tcp/Vehicle_Size\n\
float32 VehicleWidth\n\
float32 VehicleLength\n\
\n\
================================================================================\n\
MSG: wave_tcp/VehicleSafetyExtensions\n\
VehicleEventFlags VehicleEventFlags\n\
\n\
================================================================================\n\
MSG: wave_tcp/VehicleEventFlags\n\
uint8 eventGetOnDown\n\
uint8 eventTrouble\n\
uint8 eventHardDeceleration\n\
uint8 eventHardStop\n\
uint8 eventHardTurn\n\
uint8 eventUTurn\n\
uint8 eventRoadWork\n\
uint8 reserved\n\
";
  }

  static const char* value(const ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.BasicSafetyMessage_DATA_List);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BasicSafetyMessage_DATA_List_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wave_tcp::BasicSafetyMessage_DATA_List_<ContainerAllocator>& v)
  {
    s << indent << "BasicSafetyMessage_DATA_List[]" << std::endl;
    for (size_t i = 0; i < v.BasicSafetyMessage_DATA_List.size(); ++i)
    {
      s << indent << "  BasicSafetyMessage_DATA_List[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::wave_tcp::BasicSafetyMessage_DATA_<ContainerAllocator> >::stream(s, indent + "    ", v.BasicSafetyMessage_DATA_List[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAVE_TCP_MESSAGE_BASICSAFETYMESSAGE_DATA_LIST_H
