/*
 * Translates sensor_msgs/NavSat{Fix,Status} into nav_msgs/Odometry using UTM
 */

#include <ros/ros.h>
#include <message_filters/subscriber.h>
#include <message_filters/time_synchronizer.h>
#include <sensor_msgs/NavSatStatus.h>
#include <sensor_msgs/NavSatFix.h>
#include <gps_common/conversions.h>
#include <nav_msgs/Odometry.h>

#include <tf/transform_broadcaster.h> // have to be deleted


using namespace gps_common;

static ros::Publisher odom_pub;

double origin_x_ = 0.0;
double origin_y_ = 0.0;


std::string frame_id, child_frame_id;
double rot_cov;

void callback(const sensor_msgs::NavSatFixConstPtr& fix) {
  // if (fix->status.status == sensor_msgs::NavSatStatus::STATUS_NO_FIX) {
  //   ROS_INFO("No fix.");
  //   return;
  // }

  if (fix->header.stamp == ros::Time(0)) {
    return;
  }

  double northing, easting;
  std::string zone;

  LLtoUTM(fix->latitude, fix->longitude, northing, easting, zone);

  if (odom_pub) {

    //relative coordinate setting
    if(origin_x_==0.0 && origin_y_==0.0){
      origin_x_ = easting;
      origin_y_ = northing;
    }


    // Ublox Heading
    double ublox_heading = 0.0;
    ublox_heading = (double)fix->position_covariance[1]; //unit: deg/1e-5
    ublox_heading = ublox_heading/100000.0;
    ublox_heading = ublox_heading*M_PI/180.0;
    if(ublox_heading < (M_PI/2.0)){
      ublox_heading = ublox_heading+(2*M_PI)-M_PI/2.0;
    }
    else{
      ublox_heading -= M_PI/2.0;
    }
    ublox_heading = 2*M_PI - ublox_heading;

    //ublox_heading = -((ublox_heading/100000.0)-90.0)*M_PI/180.0;
    geometry_msgs::Quaternion ublox_heading_quat;
    tf::Quaternion ublox_qh;
    ublox_qh.setRPY(0,0,ublox_heading);
    tf::quaternionTFToMsg(ublox_qh,ublox_heading_quat);


    nav_msgs::Odometry odom;
    odom.header.stamp = fix->header.stamp;

    if (frame_id.empty())
      odom.header.frame_id = fix->header.frame_id;
    else
      odom.header.frame_id = frame_id;

    odom.child_frame_id = child_frame_id;

//    odom.pose.pose.position.x = easting - origin_x_;
//    odom.pose.pose.position.y = northing - origin_y_;
    // odom.pose.pose.position.z = fix->altitude;
     odom.pose.pose.position.x = easting;
     odom.pose.pose.position.y = northing;
    odom.pose.pose.position.z = fix->altitude;


 
    //odom.pose.pose.orientation.x = 1;
    //odom.pose.pose.orientation.y = 0;
    //odom.pose.pose.orientation.z = 0;
    //odom.pose.pose.orientation.w = 0;

    odom.pose.pose.orientation = ublox_heading_quat;

    // Use ENU covariance to build XYZRPY covariance
    boost::array<double, 36> covariance = {{
      fix->position_covariance[0],
      //fix->position_covariance[1],
      0,
      fix->position_covariance[2],
      0, 0, 0,
      fix->position_covariance[3],
      fix->position_covariance[4],
      fix->position_covariance[5],
      0, 0, 0,
      fix->position_covariance[6],
      fix->position_covariance[7],
      fix->position_covariance[8],
      0, 0, 0,
      0, 0, 0, rot_cov, 0, 0,
      0, 0, 0, 0, rot_cov, 0,
      0, 0, 0, 0, 0, rot_cov
    }};

    odom.pose.covariance = covariance;

    odom_pub.publish(odom);


    //------------TF publish -------


    static tf::TransformBroadcaster br;

    tf::Transform transform;
    transform.setOrigin( tf::Vector3(odom.pose.pose.position.x, odom.pose.pose.position.y, 0) );

    tf::Quaternion q;
    tf::Pose pose;
    tf::poseMsgToTF(odom.pose.pose, pose);
    double Roll,Pitch, Yaw;
    pose.getBasis().getRPY(Roll, Pitch, Yaw);
    q.setRPY(0, 0, Yaw);
    transform.setRotation(ublox_qh);

    br.sendTransform(tf::StampedTransform(transform, odom.header.stamp, odom.header.frame_id,odom.child_frame_id));
  }
}

int main (int argc, char **argv) {
  ros::init(argc, argv, "utm_odometry_node");
  ros::NodeHandle node;
  ros::NodeHandle priv_node("~");

  priv_node.param<std::string>("frame_id", frame_id, "");
  priv_node.param<std::string>("child_frame_id", child_frame_id, "");
  priv_node.param<double>("rot_covariance", rot_cov, 99999.0);

  odom_pub = node.advertise<nav_msgs::Odometry>("odom", 10);

  ros::Subscriber fix_sub = node.subscribe("fix", 10, callback);

  ros::spin();
}

